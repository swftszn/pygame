#imports pygame, sys and random module
import pygame, sys, random

def ball_animation(): #function for ball movement
    
    global ball_speed_x, ball_speed_y, player_score, opponent_score, score_time #declares global variables. Global variables initialize the variables for the whole function. 
    #makes the ball have the speed in the loop
    ball.x += ball_speed_x  #gives ball on x axis a speed
    ball.y += ball_speed_y #gives ball on y axis a speed

    if ball.top <= 0 or ball.bottom >= screen_height: #if ball touches the top or bottom of the screen
        ball_speed_y *= -1 #reverses y axis speed
        
    if ball.left <= 0: #if ball touches left side of screen
        player_score += 1 #player score will increase by one
        score_time = pygame.time.get_ticks()#gets an integer that tells us how long the game has been running since it started
        
    if ball.right >= screen_width: #if ball touches right side of screen
        opponent_score += 1 #opponent score will increase by one
        score_time = pygame.time.get_ticks()#gets an integer that tells us how long the game has been running since it started

    if ball.colliderect(player) or ball.colliderect(opponent): #if ball collides with either player,
        ball_speed_x *= -1 #the balls speed will reverse on x axis

def player_animation(): #function for player movement
    player.y += player_speed #loops player_speed for y axis
    
    if player.top <= 0: #if player touches the top of the screen
        player.top = 0 #player will not move
    if player.bottom >= screen_height: #if player touches the bottom of the screen
        player.bottom = screen_height #player will not move

def opponent_animation(): #function for player movement
    opponent.y += opponent_speed #loops player_speed for y axis
    
    if opponent.top <= 0: #if player touches the top of the screen
        opponent.top = 0 #player will not move
    if opponent.bottom >= screen_height: #if player touches the bottom of the screen
        opponent.bottom = screen_height #player will not move

def ball_restart(): #function for when the ball restarts
    
    global ball_speed_x, ball_speed_y, score_time #declares global variables

    current_time = pygame.time.get_ticks()#current time, the ball will center in the screen
    ball.center = (screen_width/2, screen_height/2) #equals signs teleports the ball to the center of the screen

    if current_time - score_time < 700: #if current time - score time is smaller than 700,
        number_three = game_font.render("3", False, 'red') #will render the number 3
        screen.blit(number_three,(screen_width/2 - 10, screen_height/2 + 20)) #puts the number on the screen
    if 700 < current_time - score_time < 1400: #if current time - score time is smaller than 700,
        number_two = game_font.render("2", False, 'orange') #will render the number 2
        screen.blit(number_two,(screen_width/2 - 10, screen_height/2 + 20)) #puts the number on the screen
    if 1400 < current_time - score_time < 2100: #if current time - score time is smaller than 700,
        number_one = game_font.render("1", False, 'green') #will render the number 1
        screen.blit(number_one,(screen_width/2 - 10, screen_height/2 + 20)) #puts the number on the screen
        
    
    if current_time - score_time < 2100: #if current time - score time is smaller than 2100,
        ball_speed_x, ball_speed_y = 0,0 #ball speed will be 0 and ball will not move
    else:  #if current time - score time is greater than 2100,
        ball_speed_y = 7 * random.choice((1,-1)) #uses random module and randomizes the ball speed direction on y axis
        ball_speed_x = 7 * random.choice((1,-1)) #uses random module and randomizes the ball speed direction on x axis
        score_time = None #score time will be none
        
#initializes all imported module so game can run
pygame.init()
#initializes pygame.time.Clock so fps can be limited
clock = pygame.time.Clock()

screen_width = 1280 #width of screen
screen_height = 720 #height of screen

#returns a display surface object (sets the width and the height of screen)
screen = pygame.display.set_mode((screen_width, screen_height))
#gives the window a title
pygame.display.set_caption('Pong')

#Game Rectangles
ball = pygame.Rect(screen_width/2 - 15, screen_height/2 - 15, 30, 30) #defines rectangle for the ball.
player = pygame.Rect(screen_width - 20, screen_height/2 - 70, 10, 140) #defines rectangle for the player.
opponent = pygame.Rect(10, screen_height/2 - 70, 10, 140) #defines rectangle for the opponent.

bg_color = pygame.Color('grey12')#background colour
light_grey = (200,200,200)#gets the colour light grey

#Game Variables
ball_speed_x = 29 * random.choice((1,-1))#horizontal speed
ball_speed_y = 29 * random.choice((1,-1))#vertical speed
player_speed = 0 #player idle speed
opponent_speed = 0 #opponent idle speed

#Text Variables
player_score = 0 #player initial score
opponent_score = 0 #opponent initial score
game_font = pygame.font.Font("freesansbold.ttf", 32) #adding a font and font size

#Score Timer
score_time = True

#Images
start = pygame.image.load('Graphics\start.png').convert_alpha() #imports image
start = pygame.transform.smoothscale(start, (200, 200))#resizes the image clearly

def main_menu(): #function for menu in the start
    while True: #when true

        global mx, my, ball_speed_x, ball_speed_y, player_score, opponent_score, score_time, player_speed, opponent_speed #declares global variables
 
        screen.fill(('snow')) #fills the screen with a white colour
 
        mx, my = pygame.mouse.get_pos() #mouse x and mouse y would track the position of the mouse
 
        button_1 = pygame.Rect(0, 0, 200, 100)#the button as a rect
        button_1.center = (screen_width/2, screen_height/2)#center the button in the middle of the screen /2 screen width and height
        screen.blit(start, button_1)#puts image on the rectangle
        if button_1.collidepoint((mx, my)):#if button collides with your mouse
            if click:  #if you click your mouse
                game() #the game function will start

 
        click = False #if user hasn't clicked
        for event in pygame.event.get(): #checks for all users actions
            if event.type == pygame.QUIT: #if users wants to quit, the game will close
                pygame.quit() #initializes quit to pygame module
                sys.exit() #uses sys module to exit the whole program
            if event.type == pygame.KEYDOWN: #checks if anykeys are pressed down
                if event.key == pygame.K_ESCAPE:#executes when escape key has been pressed
                    pygame.quit() #initializes quit to pygame module
                    sys.exit() #uses sys module to exit the whole program
            if event.type == pygame.MOUSEBUTTONDOWN: #executes when escape key has been pressed
                if event.button == 1: #if button is clicked once
                    click = True #click will be true and game will start
 
        pygame.display.update() #takes everything that came before it in the loop and draws a picture from that
        clock.tick(60) #limits how fast the loop runs

    
def game(): #function for game

    global mx, my, ball_speed_x, ball_speed_y, player_score, opponent_score, score_time, player_speed, opponent_speed #declares global variables
    
    running = True #the game running will be true
    while running: #updates the game
        #Handling Input
        screen.fill((0,0,0)) #fills the screen with that colour
        
        for event in pygame.event.get(): #checks for all users actions
            if event.type == pygame.QUIT: #if users wants to quit, the game will close
                pygame.quit() #initializes quit to pygame module
                sys.exit() #uses sys module to exit the whole program
                #both pygame.quit and sys.exit closes the game reliably
            if event.type == pygame.KEYDOWN: #checks if anykeys are pressed down
                if event.key == pygame.K_ESCAPE: #executes when down key has been pressed
                    pygame.quit() #initializes quit to pygame module
                    sys.exit() #uses sys module to exit the whole program                
                if event.key == pygame.K_DOWN: #executes when down key has been pressed
                    player_speed += 7 #player speed wll increase by 7 upwards on y axis
                if event.key == pygame.K_UP: #executes when up key has been pressed
                    player_speed -=7 #player speed wll increase by 7 downwards on y axis
                if event.key == pygame.K_s: #executes when s key has been pressed
                    opponent_speed += 7 #opponent speed wll increase by 7 upwards on y axis
                if event.key == pygame.K_w: #executes when w key has been pressed
                    opponent_speed -=7 #opponent speed wll increase by 7 downwards on y axis
            if event.type == pygame.KEYUP: #checks if anykeys are released
                if event.key == pygame.K_DOWN: #executes when down key has been released
                    player_speed -= 7 #player speed will decrease by 7 upwards on y axis causing the player to stop
                if event.key == pygame.K_UP: #executes when up key has been released
                    player_speed +=7 #player speed wll decrease by 7 downwards on y axis causing the player to stop
                if event.key == pygame.K_s: #executes when s key has been released
                    opponent_speed -= 7 #opponent speed will decrease by 7 upwards on y axis causing the opponent to stop
                if event.key == pygame.K_w: #executes when w key has been released
                    opponent_speed +=7 #opponent speed wll decrease by 7 downwards on y axis causing the opponent to stop

            
        #Game Logic (Loops all function that are defined)
        ball_animation()
        player_animation()
        opponent_animation()
        
        #Visuals
        screen.fill('snow')#fills background with bg_color
        
        pygame.draw.rect(screen, 'blue', player)#draws players on screen with blue colour
        pygame.draw.rect(screen, 'red', opponent)#draws opponent on screen with red colour
        pygame.draw.ellipse(screen, 'black', ball)#draws ellipse for ball whith white colour
        pygame.draw.aaline(screen, 'black', (screen_width/2,0), (screen_width/2, screen_height))#draws the line in the middle of the screen, divides screen width to center the line

        if score_time: #if score time is true
            ball_restart() #and the ball will recenter itself

        player_text = game_font.render(f"{player_score}",False,'blue')#surface for text, renders text and adds color to text
        screen.blit(player_text, (screen_width/2 + 50,screen_height/2))#draws the player_text variable and placed surface text on screen.

        opponent_text = game_font.render(f"{opponent_score}",False,'red')#surface for text, renders text and adds color to text
        screen.blit(opponent_text, (screen_width/2 - 80,screen_height/2))#draws the player_text variable and placed surface text on screen.
        
        pygame.display.flip() #takes everything that came before it in the loop and draws a picture from that
        clock.tick(120) #limits how fast the loop runs

main_menu()
